#!/bin/sh

#
# Description
# ██████████▓▒░
#
#     Useful commands for managing articles on the desktop
#
#
# Setup
# ████▓▒░
#
#     ╭─ Zsh ─────────────────────────────────────────────────────────────────────────────────╮
#     │  $ cd ~/                                                                              │
#     │  $ git clone https://github.com/ogty/desktop-articles-manager.git                     │
#     │  $ source ./desktop-articles-manager.git/setup.sh                                     │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯
#
#
# Usage
# ████▓▒░
#
#     "head" creates the files in the order they were updated;
#     "tail" creates the files starting with the oldest.
#     You can limit the number of PDFs generated by giving a number as an argument.
#     The default value is "5".
#
#     ╭─ Zsh ─────────────────────────────────────────────────────────────────────────────────╮
#     │  $ artima # All files are eligible                                                    │
#     │  $ artima head 3                                                                      │
#     │  $ artima tail 2                                                                      │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯
#
# Example
# ██████▓▒░
# 
#     ~/Desktop/articles/articles_about_docker.md
#     ╭─ Markdown ────────────────────────────────────────────────────────────────────────────╮
#     │  ---                                                                                  │
#     │  icon: "docker-original"                                                              │
#     │  ---                                                                                  │
#     │  # Articles About Docker                                                              │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯
#
#     NOTE: If "icon" is not specified, the "pdf" icon will be displayed.
#
#     When using Marp
#     ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡
#
#     ╭─ Markdown ────────────────────────────────────────────────────────────────────────────╮
#     │  ---                                                                                  │
#     │  icon: "docker-original"                                                              │
#     │  marp: true                                                                           │
#     │  theme: "gaia"                                                                        │
#     │  ---                                                                                  │
#     │  # Articles About Docker                                                              │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯
#
#     NOTE: By preparing your own CSS design file directly under "marp",
#           you can set the file name to theme and that design will be applied.
#
#
# Items that can be specified
# ██████████████████████████▓▒░
#
#     ┌────────┬─────────┬─────────────────────────────────────────┐
#     │ Key    │ Value   │ Description                             │
#     ├────────┼─────────┼─────────────────────────────────────────┤
#     │ icon   │ string  │ Icon name of PDF file*1                 │
#     │ marp   │ boolean │ Whether to create in Marp               │
#     │ create │ boolean │ Whether to create it in the first place │
#     │ theme  │ string  │ Marp Theme                              │
#     └────────┴─────────┴─────────────────────────────────────────┘
#
#
# *1: Icon name that can be specified. https://github.com/ogty/iconic-commands
#


THIS_DIR=$(cd $(dirname $0); pwd)
DESKTOP="$HOME/Desktop"
TARGET="$DESKTOP/articles"
DEFAULT_ICON="pdf"
FRAGS="--html --allow-local-files --image-scale 2"

count=0
number_of_displays=5


# Function to get the value of config.
function get_value() {
    # $1: Target markdown file
    # $2: Key name of config.
    value=$(cat $1    \
    | grep "^$2:"     \
    | cut -d ':' -f2  \
    | awk '{gsub(/"/, "", $0); gsub(/ /, "", $0); print($0);}')
    echo $value
}


function main() {
    # $1: Target markdown file name
    target="$TARGET/$1"
    without_file_name=$(echo $1 | cut -d '.' -f1)
    without_extension_path=$(echo $target | cut -d '.' -f1)

    # ---
    icon=$(get_value $target icon)
    marp=$(get_value $target marp)
    theme=$(get_value $target theme)
    create=$(get_value $target create)
    # ---

    # If create is false, no PDF file is created.
    if [[ $create = false ]]; then
        continue
    fi

    # PDF file generation
    if [[ $marp = true ]]; then # Generation and theming in Marp
        if [ -z $theme ]; then
            marp --pdf $target $FRAGS
        else
            theme_path="$THIS_DIR/marp/$theme.css"
            if [ -e $theme_path ]; then
                marp --pdf $target --theme $theme_path $FRAGS
            else
                marp --pdf $target $FRAGS
            fi
        fi
    else # Generate and apply themes in md-to-pdf
        md-to-pdf $target
    fi

    # Move generated PDF to Desktop
    mv $without_extension_path.pdf $DESKTOP

    # Change PDF file icon
    if [ -z $icon ]; then
        ic conv $DESKTOP/$without_file_name.pdf@$DEFAULT_ICON
    else
        ic conv $DESKTOP/$without_file_name.pdf@$icon
    fi
}


if [[ $1 = "head" ]]; then
    for line in $(ls -tl $TARGET | grep '.md$' | awk '{print($NF)}'); do
        if [ -n $2 ]; then
            number_of_displays=$2
        fi

        if [ $count -eq $number_of_displays ]; then
            break
        fi
        main $line
        ((count=count+1))
    done
elif [[ $1 = "tail" ]]; then
    for line in $(ls -trl $TARGET | grep '.md$' | awk '{print($NF)}'); do
        if [ -n $2 ]; then
            number_of_displays=$2
        fi

        if [ $count -eq $number_of_displays ]; then
            break
        fi
        main $line
        ((count=count+1))
    done
else
    for line in $(ls $TARGET | grep '.md$'); do
        main $line
    done
fi
